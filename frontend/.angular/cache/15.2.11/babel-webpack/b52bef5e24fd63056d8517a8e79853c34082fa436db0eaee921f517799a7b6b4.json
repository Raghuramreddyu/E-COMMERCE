{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class ProductService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:3000/api/products';\n  }\n  // IMPROVEMENT: Change the return type from Observable<any[]> to Observable<Product[]>\n  // This tells Angular exactly what kind of data to expect from the API.\n  getProducts() {\n    return this.http.get(this.apiUrl);\n  }\n  // IMPROVEMENT: Also update the single product getter for future use.\n  getProduct(slug) {\n    // Note: It's often better to fetch by a unique slug than by an ID in the URL.\n    // We can adjust the backend route for this later if needed.\n    return this.http.get(`${this.apiUrl}/${slug}`);\n  }\n  addProduct(product) {\n    return this.http.post(this.apiUrl, product, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.authService.getToken()}`\n      })\n    });\n  }\n  deleteProduct(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${this.authService.getToken()}`\n      })\n    });\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAkB9D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAFjD,WAAM,GAAG,oCAAoC;EAEqB;EAE1E;EACA;EACAC,WAAW;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,IAAI,CAACC,MAAM,CAAC;EAC9C;EAEA;EACAC,UAAU,CAACC,IAAY;IACrB;IACA;IACA,OAAO,IAAI,CAACN,IAAI,CAACG,GAAG,CAAU,GAAG,IAAI,CAACC,MAAM,IAAIE,IAAI,EAAE,CAAC;EACzD;EAEAC,UAAU,CAACC,OAAgB;IACzB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAU,IAAI,CAACL,MAAM,EAAEI,OAAO,EAAE;MACnDE,OAAO,EAAE,IAAIb,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACU,QAAQ,EAAE;OACvD;KACF,CAAC;EACJ;EAEAC,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACb,IAAI,CAACc,MAAM,CAAC,GAAG,IAAI,CAACV,MAAM,IAAIS,EAAE,EAAE,EAAE;MAC9CH,OAAO,EAAE,IAAIb,WAAW,CAAC;QACvB,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACU,QAAQ,EAAE;OACvD;KACF,CAAC;EACJ;;;uBAjCWb,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAiB,SAAdjB,cAAc;MAAAkB,YAFb;IAAM;EAAA","names":["HttpHeaders","ProductService","constructor","http","authService","getProducts","get","apiUrl","getProduct","slug","addProduct","product","post","headers","getToken","deleteProduct","id","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\91630\\OneDrive\\Desktop\\E-Commerce-Website\\frontend\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n// IMPROVEMENT: Define the Product interface here as well.\r\n// In a larger app, you would put this in its own file (e.g., 'src/app/models/product.model.ts')\r\nexport interface Product {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  image_url: string;\r\n  slug: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  private apiUrl = 'http://localhost:3000/api/products';\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n  // IMPROVEMENT: Change the return type from Observable<any[]> to Observable<Product[]>\r\n  // This tells Angular exactly what kind of data to expect from the API.\r\n  getProducts(): Observable<Product[]> {\r\n    return this.http.get<Product[]>(this.apiUrl);\r\n  }\r\n\r\n  // IMPROVEMENT: Also update the single product getter for future use.\r\n  getProduct(slug: string): Observable<Product> {\r\n    // Note: It's often better to fetch by a unique slug than by an ID in the URL.\r\n    // We can adjust the backend route for this later if needed.\r\n    return this.http.get<Product>(`${this.apiUrl}/${slug}`);\r\n  }\r\n\r\n  addProduct(product: Product): Observable<Product> {\r\n    return this.http.post<Product>(this.apiUrl, product, {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.authService.getToken()}`\r\n      })\r\n    });\r\n  }\r\n\r\n  deleteProduct(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`, {\r\n      headers: new HttpHeaders({\r\n        'Authorization': `Bearer ${this.authService.getToken()}`\r\n      })\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}