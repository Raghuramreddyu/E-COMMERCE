{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this._cartItems = new BehaviorSubject([]);\n    this.cartItems$ = this._cartItems.asObservable();\n    const cart = localStorage.getItem('cart');\n    if (cart) {\n      this._cartItems.next(JSON.parse(cart));\n    }\n  }\n  persistCart(items) {\n    localStorage.setItem('cart', JSON.stringify(items));\n    this._cartItems.next(items);\n  }\n  addToCart(product) {\n    const currentItems = this._cartItems.value;\n    const existingItem = currentItems.find(item => item.id === product.id);\n    if (existingItem) {\n      existingItem.quantity++;\n    } else {\n      currentItems.push({\n        ...product,\n        quantity: 1\n      });\n    }\n    this.persistCart(currentItems);\n  }\n  updateQuantity(productId, quantity) {\n    const currentItems = this._cartItems.value;\n    const item = currentItems.find(item => item.id === productId);\n    if (item) {\n      item.quantity = quantity;\n      if (item.quantity <= 0) {\n        this.removeFromCart(productId);\n      } else {\n        this.persistCart(currentItems);\n      }\n    }\n  }\n  removeFromCart(productId) {\n    let currentItems = this._cartItems.value;\n    currentItems = currentItems.filter(item => item.id !== productId);\n    this.persistCart(currentItems);\n  }\n  clearCart() {\n    this.persistCart([]);\n  }\n  getCartTotal() {\n    return this._cartItems.value.reduce((acc, item) => acc + item.price * item.quantity, 0);\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,WAAW;EAItBC;IAHQ,eAAU,GAAG,IAAIF,eAAe,CAAQ,EAAE,CAAC;IACnD,eAAU,GAAG,IAAI,CAACG,UAAU,CAACC,YAAY,EAAE;IAGzC,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,IAAIF,IAAI,EAAE;MACR,IAAI,CAACF,UAAU,CAACK,IAAI,CAACC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,CAAC;;EAE1C;EAEQM,WAAW,CAACC,KAAY;IAC9BN,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAACK,SAAS,CAACF,KAAK,CAAC,CAAC;IACnD,IAAI,CAACT,UAAU,CAACK,IAAI,CAACI,KAAK,CAAC;EAC7B;EAEAG,SAAS,CAACC,OAAY;IACpB,MAAMC,YAAY,GAAG,IAAI,CAACd,UAAU,CAACe,KAAK;IAC1C,MAAMC,YAAY,GAAGF,YAAY,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;IAEtE,IAAIH,YAAY,EAAE;MAChBA,YAAY,CAACI,QAAQ,EAAE;KACxB,MAAM;MACLN,YAAY,CAACO,IAAI,CAAC;QAAE,GAAGR,OAAO;QAAEO,QAAQ,EAAE;MAAC,CAAE,CAAC;;IAEhD,IAAI,CAACZ,WAAW,CAACM,YAAY,CAAC;EAChC;EAEAQ,cAAc,CAACC,SAAiB,EAAEH,QAAgB;IAChD,MAAMN,YAAY,GAAG,IAAI,CAACd,UAAU,CAACe,KAAK;IAC1C,MAAMG,IAAI,GAAGJ,YAAY,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKI,SAAS,CAAC;IAE7D,IAAIL,IAAI,EAAE;MACRA,IAAI,CAACE,QAAQ,GAAGA,QAAQ;MACxB,IAAIF,IAAI,CAACE,QAAQ,IAAI,CAAC,EAAE;QACtB,IAAI,CAACI,cAAc,CAACD,SAAS,CAAC;OAC/B,MAAM;QACL,IAAI,CAACf,WAAW,CAACM,YAAY,CAAC;;;EAGpC;EAEAU,cAAc,CAACD,SAAiB;IAC9B,IAAIT,YAAY,GAAG,IAAI,CAACd,UAAU,CAACe,KAAK;IACxCD,YAAY,GAAGA,YAAY,CAACW,MAAM,CAACP,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKI,SAAS,CAAC;IACjE,IAAI,CAACf,WAAW,CAACM,YAAY,CAAC;EAChC;EAEAY,SAAS;IACP,IAAI,CAAClB,WAAW,CAAC,EAAE,CAAC;EACtB;EAEAmB,YAAY;IACV,OAAO,IAAI,CAAC3B,UAAU,CAACe,KAAK,CAACa,MAAM,CAAC,CAACC,GAAG,EAAEX,IAAI,KAAKW,GAAG,GAAIX,IAAI,CAACY,KAAK,GAAGZ,IAAI,CAACE,QAAS,EAAE,CAAC,CAAC;EAC3F;;;uBAtDWtB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAiC,SAAXjC,WAAW;MAAAkC,YAFV;IAAM;EAAA","names":["BehaviorSubject","CartService","constructor","_cartItems","asObservable","cart","localStorage","getItem","next","JSON","parse","persistCart","items","setItem","stringify","addToCart","product","currentItems","value","existingItem","find","item","id","quantity","push","updateQuantity","productId","removeFromCart","filter","clearCart","getCartTotal","reduce","acc","price","factory","providedIn"],"sourceRoot":"","sources":["/Users/saiaryan/Documents/devops-int2/frontend/src/app/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private _cartItems = new BehaviorSubject<any[]>([]);\n  cartItems$ = this._cartItems.asObservable();\n\n  constructor() {\n    const cart = localStorage.getItem('cart');\n    if (cart) {\n      this._cartItems.next(JSON.parse(cart));\n    }\n  }\n\n  private persistCart(items: any[]) {\n    localStorage.setItem('cart', JSON.stringify(items));\n    this._cartItems.next(items);\n  }\n\n  addToCart(product: any) {\n    const currentItems = this._cartItems.value;\n    const existingItem = currentItems.find(item => item.id === product.id);\n\n    if (existingItem) {\n      existingItem.quantity++;\n    } else {\n      currentItems.push({ ...product, quantity: 1 });\n    }\n    this.persistCart(currentItems);\n  }\n\n  updateQuantity(productId: number, quantity: number) {\n    const currentItems = this._cartItems.value;\n    const item = currentItems.find(item => item.id === productId);\n\n    if (item) {\n      item.quantity = quantity;\n      if (item.quantity <= 0) {\n        this.removeFromCart(productId);\n      } else {\n        this.persistCart(currentItems);\n      }\n    }\n  }\n\n  removeFromCart(productId: number) {\n    let currentItems = this._cartItems.value;\n    currentItems = currentItems.filter(item => item.id !== productId);\n    this.persistCart(currentItems);\n  }\n\n  clearCart() {\n    this.persistCart([]);\n  }\n\n  getCartTotal() {\n    return this._cartItems.value.reduce((acc, item) => acc + (item.price * item.quantity), 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}