{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterPageComponent_div_8_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPageComponent_div_8_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Please enter a valid email.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPageComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, RegisterPageComponent_div_8_small_1_Template, 2, 0, \"small\", 17);\n    i0.ɵɵtemplate(2, RegisterPageComponent_div_8_small_2_Template, 2, 0, \"small\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.registerForm.get(\"email\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.registerForm.get(\"email\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"email\"]);\n  }\n}\nfunction RegisterPageComponent_div_13_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPageComponent_div_13_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Password must be at least 8 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPageComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, RegisterPageComponent_div_13_small_1_Template, 2, 0, \"small\", 17);\n    i0.ɵɵtemplate(2, RegisterPageComponent_div_13_small_2_Template, 2, 0, \"small\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.registerForm.get(\"password\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.registerForm.get(\"password\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nfunction RegisterPageComponent_div_18_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Please confirm your password.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPageComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, RegisterPageComponent_div_18_small_1_Template, 2, 0, \"small\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.registerForm.get(\"confirmPassword\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n  }\n}\nfunction RegisterPageComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"small\");\n    i0.ɵɵtext(2, \"Passwords do not match.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction RegisterPageComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.registerSuccess, \" \");\n  }\n}\nfunction RegisterPageComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.registerError, \" \");\n  }\n}\n// IMPROVEMENT: Custom validator function to check if passwords match.\nexport const passwordsMatchValidator = control => {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n  // If controls haven't been touched yet, don't validate\n  if (!password || !confirmPassword || !password.value || !confirmPassword.value) {\n    return null;\n  }\n  // Return an error if passwords do not match\n  return password.value === confirmPassword.value ? null : {\n    passwordsMismatch: true\n  };\n};\nexport class RegisterPageComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validators: passwordsMatchValidator\n    }); // Apply the custom validator to the whole form\n    this.isLoading = false;\n    this.registerError = null;\n    this.registerSuccess = null;\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.registerError = null;\n    this.registerSuccess = null;\n    // We only need email and password for the API call\n    const {\n      email,\n      password\n    } = this.registerForm.value;\n    this.authService.register({\n      email,\n      password\n    }).subscribe({\n      next: () => {\n        this.isLoading = false;\n        this.registerSuccess = 'Registration successful! Redirecting to login...';\n        // Redirect to login page after a short delay to show the success message\n        setTimeout(() => {\n          this.router.navigate(['/login']);\n        }, 2000);\n      },\n      error: err => {\n        this.isLoading = false;\n        // Provide specific feedback if the user already exists\n        if (err.status === 400) {\n          this.registerError = 'This email is already registered. Please login.';\n        } else {\n          this.registerError = 'An unexpected error occurred. Please try again.';\n        }\n        console.error('Registration failed', err);\n      }\n    });\n  }\n  static {\n    this.ɵfac = function RegisterPageComponent_Factory(t) {\n      return new (t || RegisterPageComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterPageComponent,\n      selectors: [[\"app-register-page\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 29,\n      vars: 9,\n      consts: [[1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\"], [\"class\", \"validation-error\", 4, \"ngIf\"], [\"for\", \"password\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\"], [\"for\", \"confirmPassword\"], [\"id\", \"confirmPassword\", \"type\", \"password\", \"formControlName\", \"confirmPassword\"], [1, \"feedback-container\"], [\"class\", \"success-message\", 4, \"ngIf\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"submit\", 3, \"disabled\"], [1, \"auth-switch\"], [\"routerLink\", \"/login\"], [1, \"validation-error\"], [4, \"ngIf\"], [1, \"success-message\"], [1, \"error-message\"]],\n      template: function RegisterPageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Register\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function RegisterPageComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵtemplate(8, RegisterPageComponent_div_8_Template, 3, 2, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 7);\n          i0.ɵɵtemplate(13, RegisterPageComponent_div_13_Template, 3, 2, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"div\", 2)(15, \"label\", 8);\n          i0.ɵɵtext(16, \"Confirm Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 9);\n          i0.ɵɵtemplate(18, RegisterPageComponent_div_18_Template, 2, 1, \"div\", 5);\n          i0.ɵɵtemplate(19, RegisterPageComponent_div_19_Template, 3, 0, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"div\", 10);\n          i0.ɵɵtemplate(21, RegisterPageComponent_div_21_Template, 2, 1, \"div\", 11);\n          i0.ɵɵtemplate(22, RegisterPageComponent_div_22_Template, 2, 1, \"div\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 13);\n          i0.ɵɵtext(24);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"p\", 14);\n          i0.ɵɵtext(26, \"Already have an account? \");\n          i0.ɵɵelementStart(27, \"a\", 15);\n          i0.ɵɵtext(28, \"Login\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          let tmp_3_0;\n          let tmp_4_0;\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_1_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.touched));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_3_0.touched));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", (ctx.registerForm.errors == null ? null : ctx.registerForm.errors[\"passwordsMismatch\"]) && ((tmp_4_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_4_0.touched));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.registerSuccess);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.registerError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid || ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Registering...\" : \"Register\", \" \");\n        }\n      },\n      dependencies: [CommonModule, i4.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, RouterModule, i3.RouterLink],\n      styles: [\".form-container[_ngcontent-%COMP%] {\\r\\n    max-width: 400px;\\r\\n    margin: 2rem auto;\\r\\n    padding: 2rem;\\r\\n    border: 1px solid var(--subtle-borders);\\r\\n    border-radius: 10px;\\r\\n}\\r\\n\\r\\n.form-container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\r\\n    text-align: center;\\r\\n    margin-bottom: 2rem;\\r\\n}\\r\\n\\r\\n.auth-switch[_ngcontent-%COMP%] {\\r\\n    text-align: center;\\r\\n    margin-top: 1.5rem;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLHVDQUF1QztJQUN2QyxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGtCQUFrQjtBQUN0QiIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLWNvbnRhaW5lciB7XHJcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgbWFyZ2luOiAycmVtIGF1dG87XHJcbiAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tc3VidGxlLWJvcmRlcnMpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxufVxyXG5cclxuLmZvcm0tY29udGFpbmVyIGgyIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbn1cclxuXHJcbi5hdXRoLXN3aXRjaCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW07XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["CommonModule","ReactiveFormsModule","Validators","RouterModule","i0","passwordsMatchValidator","control","password","get","confirmPassword","value","passwordsMismatch","RegisterPageComponent","constructor","fb","authService","router","group","email","required","minLength","validators","onSubmit","registerForm","invalid","isLoading","registerError","registerSuccess","register","subscribe","next","setTimeout","navigate","error","err","status","console","selectors","standalone","features","decls","vars","consts","template","ctx","styles"],"sourceRoot":"","sources":["C:\\Users\\91630\\OneDrive\\Desktop\\E-Commerce-Website\\frontend\\src\\app\\pages\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AbstractControl, FormBuilder, ReactiveFormsModule, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n// IMPROVEMENT: Custom validator function to check if passwords match.\r\nexport const passwordsMatchValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n  const password = control.get('password');\r\n  const confirmPassword = control.get('confirmPassword');\r\n\r\n  // If controls haven't been touched yet, don't validate\r\n  if (!password || !confirmPassword || !password.value || !confirmPassword.value) {\r\n    return null;\r\n  }\r\n\r\n  // Return an error if passwords do not match\r\n  return password.value === confirmPassword.value ? null : { passwordsMismatch: true };\r\n};\r\n\r\n@Component({\r\n  selector: 'app-register-page',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, RouterModule],\r\n  template: `\r\n    <div class=\"form-container\">\r\n      <h2>Register</h2>\r\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"email\">Email</label>\r\n          <input id=\"email\" type=\"email\" formControlName=\"email\">\r\n          <div *ngIf=\"registerForm.get('email')?.invalid && registerForm.get('email')?.touched\" class=\"validation-error\">\r\n            <small *ngIf=\"registerForm.get('email')?.errors?.['required']\">Email is required.</small>\r\n            <small *ngIf=\"registerForm.get('email')?.errors?.['email']\">Please enter a valid email.</small>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <input id=\"password\" type=\"password\" formControlName=\"password\">\r\n          <div *ngIf=\"registerForm.get('password')?.invalid && registerForm.get('password')?.touched\" class=\"validation-error\">\r\n            <small *ngIf=\"registerForm.get('password')?.errors?.['required']\">Password is required.</small>\r\n            <small *ngIf=\"registerForm.get('password')?.errors?.['minlength']\">Password must be at least 8 characters long.</small>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"confirmPassword\">Confirm Password</label>\r\n          <input id=\"confirmPassword\" type=\"password\" formControlName=\"confirmPassword\">\r\n          <div *ngIf=\"registerForm.get('confirmPassword')?.invalid && registerForm.get('confirmPassword')?.touched\" class=\"validation-error\">\r\n             <small *ngIf=\"registerForm.get('confirmPassword')?.errors?.['required']\">Please confirm your password.</small>\r\n          </div>\r\n          <div *ngIf=\"registerForm.errors?.['passwordsMismatch'] && registerForm.get('confirmPassword')?.touched\" class=\"validation-error\">\r\n            <small>Passwords do not match.</small>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"feedback-container\">\r\n          <div *ngIf=\"registerSuccess\" class=\"success-message\">\r\n            {{ registerSuccess }}\r\n          </div>\r\n          <div *ngIf=\"registerError\" class=\"error-message\">\r\n            {{ registerError }}\r\n          </div>\r\n        </div>\r\n\r\n        <button type=\"submit\" [disabled]=\"registerForm.invalid || isLoading\">\r\n          {{ isLoading ? 'Registering...' : 'Register' }}\r\n        </button>\r\n\r\n        <p class=\"auth-switch\">Already have an account? <a routerLink=\"/login\">Login</a></p>\r\n      </form>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterPageComponent {\r\n  registerForm = this.fb.group({\r\n    email: ['', [Validators.required, Validators.email]],\r\n    password: ['', [Validators.required, Validators.minLength(8)]],\r\n    confirmPassword: ['', Validators.required]\r\n  }, { validators: passwordsMatchValidator }); // Apply the custom validator to the whole form\r\n\r\n  isLoading = false;\r\n  registerError: string | null = null;\r\n  registerSuccess: string | null = null;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  onSubmit() {\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.registerError = null;\r\n    this.registerSuccess = null;\r\n\r\n    // We only need email and password for the API call\r\n    const { email, password } = this.registerForm.value;\r\n\r\n    this.authService.register({ email, password }).subscribe({\r\n      next: () => {\r\n        this.isLoading = false;\r\n        this.registerSuccess = 'Registration successful! Redirecting to login...';\r\n        // Redirect to login page after a short delay to show the success message\r\n        setTimeout(() => {\r\n          this.router.navigate(['/login']);\r\n        }, 2000);\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.isLoading = false;\r\n        // Provide specific feedback if the user already exists\r\n        if (err.status === 400) {\r\n          this.registerError = 'This email is already registered. Please login.';\r\n        } else {\r\n          this.registerError = 'An unexpected error occurred. Please try again.';\r\n        }\r\n        console.error('Registration failed', err);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}