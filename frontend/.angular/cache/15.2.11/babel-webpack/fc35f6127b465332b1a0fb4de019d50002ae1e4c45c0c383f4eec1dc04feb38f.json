{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n    this._isLoggedIn = new BehaviorSubject(false);\n    this.isLoggedIn$ = this._isLoggedIn.asObservable();\n    const token = this.getToken();\n    this._isLoggedIn.next(!!token);\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      this._isLoggedIn.next(true);\n    }));\n  }\n  adminLogin(credentials) {\n    return this.http.post(`${this.apiUrl}/admin/login`, credentials).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      // IMPROVEMENT: REMOVED setting 'isAdmin' in localStorage. The JWT is the source of truth.\n      this._isLoggedIn.next(true);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    // IMPROVEMENT: REMOVED removing 'isAdmin' from localStorage.\n    this._isLoggedIn.next(false);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  // IMPROVEMENT: This is now the secure way to check for admin privileges.\n  isAdmin() {\n    const token = this.getToken();\n    if (!token) {\n      return false;\n    }\n    try {\n      // Decode the token to read its payload\n      const decodedToken = jwtDecode(token);\n      return decodedToken.isAdmin === true;\n    } catch (error) {\n      console.error(\"Failed to decode token\", error);\n      return false;\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;AACvD,SAASC,SAAS,QAAQ,YAAY;;;AAgBtC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,gCAAgC;IACzC,gBAAW,GAAG,IAAIL,eAAe,CAAU,KAAK,CAAC;IACzD,gBAAW,GAAG,IAAI,CAACM,WAAW,CAACC,YAAY,EAAE;IAG3C,MAAMC,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;IAC7B,IAAI,CAACH,WAAW,CAACI,IAAI,CAAC,CAAC,CAACF,KAAK,CAAC;EAChC;EAEAG,QAAQ,CAACC,IAAS;IAChB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,IAAI,CAAC;EACxD;EAEAG,KAAK,CAACC,WAA4B;IAChC,OAAO,IAAI,CAACX,IAAI,CAACQ,IAAI,CAAe,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEE,WAAW,CAAC,CAACC,IAAI,CAC3EhB,GAAG,CAAEiB,QAAsB,IAAI;MAC7BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACV,KAAK,CAAC;MAC7C,IAAI,CAACF,WAAW,CAACI,IAAI,CAAC,IAAI,CAAC;IAC7B,CAAC,CAAC,CACH;EACH;EAEAW,UAAU,CAACL,WAAgB;IACzB,OAAO,IAAI,CAACX,IAAI,CAACQ,IAAI,CAAe,GAAG,IAAI,CAACC,MAAM,cAAc,EAAEE,WAAW,CAAC,CAACC,IAAI,CACjFhB,GAAG,CAAEiB,QAAsB,IAAI;MAC7BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACV,KAAK,CAAC;MAC7C;MACA,IAAI,CAACF,WAAW,CAACI,IAAI,CAAC,IAAI,CAAC;IAC7B,CAAC,CAAC,CACH;EACH;EAEAY,MAAM;IACJH,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;IAChC;IACA,IAAI,CAACjB,WAAW,CAACI,IAAI,CAAC,KAAK,CAAC;EAC9B;EAEAD,QAAQ;IACN,OAAOU,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;EACtC;EAEA;EACAC,OAAO;IACL,MAAMjB,KAAK,GAAG,IAAI,CAACC,QAAQ,EAAE;IAC7B,IAAI,CAACD,KAAK,EAAE;MACV,OAAO,KAAK;;IAEd,IAAI;MACF;MACA,MAAMkB,YAAY,GAAQxB,SAAS,CAACM,KAAK,CAAC;MAC1C,OAAOkB,YAAY,CAACD,OAAO,KAAK,IAAI;KACrC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,KAAK;;EAEhB;;;uBAzDWxB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA0B,SAAX1B,WAAW;MAAA2B,YAFV;IAAM;EAAA","names":["BehaviorSubject","tap","jwtDecode","AuthService","constructor","http","_isLoggedIn","asObservable","token","getToken","next","register","user","post","apiUrl","login","credentials","pipe","response","localStorage","setItem","adminLogin","logout","removeItem","getItem","isAdmin","decodedToken","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Woxsen\\DevOPS Project\\E-Commerce-Website\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// IMPROVEMENT: Define interfaces for strong typing.\r\nexport interface AuthResponse {\r\n  token: string;\r\n  email: string;\r\n}\r\n\r\nexport interface UserCredentials {\r\n  email: string;\r\n  password?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3000/api/auth';\r\n  private _isLoggedIn = new BehaviorSubject<boolean>(false);\r\n  isLoggedIn$ = this._isLoggedIn.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    const token = this.getToken();\r\n    this._isLoggedIn.next(!!token);\r\n  }\r\n\r\n  register(user: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/register`, user);\r\n  }\r\n\r\n  login(credentials: UserCredentials): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials).pipe(\r\n      tap((response: AuthResponse) => {\r\n        localStorage.setItem('token', response.token);\r\n        this._isLoggedIn.next(true);\r\n      })\r\n    );\r\n  }\r\n\r\n  adminLogin(credentials: any): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/admin/login`, credentials).pipe(\r\n      tap((response: AuthResponse) => {\r\n        localStorage.setItem('token', response.token);\r\n        // IMPROVEMENT: REMOVED setting 'isAdmin' in localStorage. The JWT is the source of truth.\r\n        this._isLoggedIn.next(true);\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    // IMPROVEMENT: REMOVED removing 'isAdmin' from localStorage.\r\n    this._isLoggedIn.next(false);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // IMPROVEMENT: This is now the secure way to check for admin privileges.\r\n  isAdmin(): boolean {\r\n    const token = this.getToken();\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    try {\r\n      // Decode the token to read its payload\r\n      const decodedToken: any = jwtDecode(token);\r\n      return decodedToken.isAdmin === true;\r\n    } catch (error) {\r\n      console.error(\"Failed to decode token\", error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}