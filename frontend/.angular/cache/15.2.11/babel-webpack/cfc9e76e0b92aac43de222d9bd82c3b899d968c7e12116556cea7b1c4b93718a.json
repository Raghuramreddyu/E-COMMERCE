{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction LoginPageComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.loginError, \" \");\n  }\n}\nexport class LoginPageComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n    // IMPROVEMENT: Added properties for loading state and error messages.\n    this.isLoading = false;\n    this.loginError = null;\n  }\n  onSubmit() {\n    // Prevent submission if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n    // IMPROVEMENT: Set loading state and clear previous errors.\n    this.isLoading = true;\n    this.loginError = null;\n    this.authService.login(this.loginForm.value).subscribe({\n      next: () => {\n        this.isLoading = false; // Stop loading on success\n        this.router.navigate(['/kits']); // Or your desired route\n      },\n\n      error: err => {\n        this.isLoading = false; // Stop loading on error\n        // Set a user-friendly error message\n        this.loginError = 'Invalid email or password. Please try again.';\n        console.error('Login failed', err);\n      }\n    });\n  }\n  static {\n    this.ɵfac = function LoginPageComponent_Factory(t) {\n      return new (t || LoginPageComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginPageComponent,\n      selectors: [[\"app-login-page\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 20,\n      vars: 4,\n      consts: [[1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\"], [\"for\", \"password\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\"], [1, \"feedback-container\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"type\", \"submit\", 3, \"disabled\"], [1, \"auth-switch\"], [\"routerLink\", \"/register\"], [1, \"error-message\"]],\n      template: function LoginPageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginPageComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n          i0.ɵɵtext(10, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 7);\n          i0.ɵɵtemplate(13, LoginPageComponent_div_13_Template, 2, 1, \"div\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"button\", 9);\n          i0.ɵɵtext(15);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"p\", 10);\n          i0.ɵɵtext(17, \"Don't have an account? \");\n          i0.ɵɵelementStart(18, \"a\", 11);\n          i0.ɵɵtext(19, \"Register\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngIf\", ctx.loginError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid || ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Logging in...\" : \"Login\", \" \");\n        }\n      },\n      dependencies: [CommonModule, i4.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, RouterModule, i3.RouterLink],\n      styles: [\".form-container[_ngcontent-%COMP%] {\\r\\n    max-width: 400px;\\r\\n    margin: 2rem auto;\\r\\n    padding: 2rem;\\r\\n    border: 1px solid var(--subtle-borders);\\r\\n    border-radius: 10px;\\r\\n}\\r\\n\\r\\n.form-container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\r\\n    text-align: center;\\r\\n    margin-bottom: 2rem;\\r\\n}\\r\\n\\r\\n.auth-switch[_ngcontent-%COMP%] {\\r\\n    text-align: center;\\r\\n    margin-top: 1.5rem;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLHVDQUF1QztJQUN2QyxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGtCQUFrQjtBQUN0QiIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLWNvbnRhaW5lciB7XHJcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgbWFyZ2luOiAycmVtIGF1dG87XHJcbiAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tc3VidGxlLWJvcmRlcnMpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxufVxyXG5cclxuLmZvcm0tY29udGFpbmVyIGgyIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbn1cclxuXHJcbi5hdXRoLXN3aXRjaCB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tdG9wOiAxLjVyZW07XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,SAAsBC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AAC7E,SAAiBC,YAAY,QAAQ,iBAAiB;;;;;;;;IAsB5CC,+BAA8C;IAC5CA,YACF;IAAAA,iBAAM;;;;IADJA,eACF;IADEA,kDACF;;;AAcV,OAAM,MAAOC,kBAAkB;EAU7BC,YACUC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAFd,OAAE,GAAFF,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IAZhB,cAAS,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MACxBC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACS,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ;KACnC,CAAC;IAEF;IACA,cAAS,GAAG,KAAK;IACjB,eAAU,GAAkB,IAAI;EAM7B;EAEHE,QAAQ;IACN;IACA,IAAI,IAAI,CAACC,SAAS,CAACC,OAAO,EAAE;MAC1B;;IAGF;IACA,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,UAAU,GAAG,IAAI;IAEtB,IAAI,CAACV,WAAW,CAACW,KAAK,CAAC,IAAI,CAACJ,SAAS,CAACK,KAAK,CAAC,CAACC,SAAS,CAAC;MACrDC,IAAI,EAAE,MAAK;QACT,IAAI,CAACL,SAAS,GAAG,KAAK,CAAC,CAAC;QACxB,IAAI,CAACR,MAAM,CAACc,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACnC,CAAC;;MACDC,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACR,SAAS,GAAG,KAAK,CAAC,CAAC;QACxB;QACA,IAAI,CAACC,UAAU,GAAG,8CAA8C;QAChEQ,OAAO,CAACF,KAAK,CAAC,cAAc,EAAEC,GAAG,CAAC;MACpC;KACD,CAAC;EACJ;;;uBAtCWpB,kBAAkB;IAAA;EAAA;;;YAAlBA,kBAAkB;MAAAsB;MAAAC;MAAAC;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UA9B3B7B,8BAA4B;UACtBA,qBAAK;UAAAA,iBAAK;UACdA,+BAAsD;UAAxBA;YAAA,OAAY8B,cAAU;UAAA,EAAC;UACnD9B,8BAAwB;UACHA,qBAAK;UAAAA,iBAAQ;UAChCA,2BAAuD;UACzDA,iBAAM;UACNA,8BAAwB;UACAA,yBAAQ;UAAAA,iBAAQ;UACtCA,4BAAgE;UAClEA,iBAAM;UAGNA,+BAAgC;UAC9BA,qEAEM;UACRA,iBAAM;UAGNA,kCAAkE;UAChEA,aACF;UAAAA,iBAAS;UAETA,8BAAuB;UAAAA,wCAAuB;UAAAA,8BAA0B;UAAAA,yBAAQ;UAAAA,iBAAI;;;UAtBhFA,eAAuB;UAAvBA,yCAAuB;UAYnBA,gBAAgB;UAAhBA,qCAAgB;UAMFA,eAA2C;UAA3CA,iEAA2C;UAC/DA,eACF;UADEA,0EACF;;;qBAxBIJ,YAAY,WAAEC,mBAAmB,qIAAEE,YAAY;MAAAgC;IAAA;EAAA","names":["CommonModule","ReactiveFormsModule","Validators","RouterModule","i0","LoginPageComponent","constructor","fb","authService","router","group","email","required","password","onSubmit","loginForm","invalid","isLoading","loginError","login","value","subscribe","next","navigate","error","err","console","selectors","standalone","features","decls","vars","consts","template","ctx","styles"],"sourceRoot":"","sources":["C:\\Users\\91630\\OneDrive\\Desktop\\E-Commerce-Website\\frontend\\src\\app\\pages\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login-page',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, RouterModule],\r\n  template: `\r\n    <div class=\"form-container\">\r\n      <h2>Login</h2>\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group\">\r\n          <label for=\"email\">Email</label>\r\n          <input id=\"email\" type=\"email\" formControlName=\"email\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <input id=\"password\" type=\"password\" formControlName=\"password\">\r\n        </div>\r\n\r\n        <!-- IMPROVEMENT: Added a container for user feedback messages -->\r\n        <div class=\"feedback-container\">\r\n          <div *ngIf=\"loginError\" class=\"error-message\">\r\n            {{ loginError }}\r\n          </div>\r\n        </div>\r\n\r\n        <!-- IMPROVEMENT: Button text and disabled state now reflect loading status -->\r\n        <button type=\"submit\" [disabled]=\"loginForm.invalid || isLoading\">\r\n          {{ isLoading ? 'Logging in...' : 'Login' }}\r\n        </button>\r\n        \r\n        <p class=\"auth-switch\">Don't have an account? <a routerLink=\"/register\">Register</a></p>\r\n      </form>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginPageComponent {\r\n  loginForm = this.fb.group({\r\n    email: ['', [Validators.required, Validators.email]],\r\n    password: ['', Validators.required]\r\n  });\r\n\r\n  // IMPROVEMENT: Added properties for loading state and error messages.\r\n  isLoading = false;\r\n  loginError: string | null = null;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  onSubmit() {\r\n    // Prevent submission if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n    \r\n    // IMPROVEMENT: Set loading state and clear previous errors.\r\n    this.isLoading = true;\r\n    this.loginError = null;\r\n\r\n    this.authService.login(this.loginForm.value).subscribe({\r\n      next: () => {\r\n        this.isLoading = false; // Stop loading on success\r\n        this.router.navigate(['/kits']); // Or your desired route\r\n      },\r\n      error: (err) => {\r\n        this.isLoading = false; // Stop loading on error\r\n        // Set a user-friendly error message\r\n        this.loginError = 'Invalid email or password. Please try again.';\r\n        console.error('Login failed', err);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}