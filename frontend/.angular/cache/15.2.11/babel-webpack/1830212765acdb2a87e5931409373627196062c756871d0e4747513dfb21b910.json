{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { jwtDecode } from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3000/api/auth';\n      this._isLoggedIn = new BehaviorSubject(false);\n      this.isLoggedIn$ = this._isLoggedIn.asObservable();\n      const token = this.getToken();\n      this._isLoggedIn.next(!!token);\n    }\n    register(user) {\n      return this.http.post(`${this.apiUrl}/register`, user);\n    }\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n        localStorage.setItem('token', response.token);\n        this._isLoggedIn.next(true);\n      }));\n    }\n    adminLogin(credentials) {\n      return this.http.post(`${this.apiUrl}/admin/login`, credentials).pipe(tap(response => {\n        localStorage.setItem('token', response.token);\n        // IMPROVEMENT: REMOVED setting 'isAdmin' in localStorage. The JWT is the source of truth.\n        this._isLoggedIn.next(true);\n      }));\n    }\n    logout() {\n      localStorage.removeItem('token');\n      // IMPROVEMENT: REMOVED removing 'isAdmin' from localStorage.\n      this._isLoggedIn.next(false);\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    // IMPROVEMENT: This is now the secure way to check for admin privileges.\n    isAdmin() {\n      const token = this.getToken();\n      if (!token) {\n        return false;\n      }\n      try {\n        // Decode the token to read its payload\n        const decodedToken = jwtDecode(token);\n        return decodedToken.isAdmin === true;\n      } catch (error) {\n        console.error(\"Failed to decode token\", error);\n        return false;\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}