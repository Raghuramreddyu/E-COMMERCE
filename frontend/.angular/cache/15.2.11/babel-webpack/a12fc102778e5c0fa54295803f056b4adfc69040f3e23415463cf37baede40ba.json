{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\n// -----------------------------------------\nexport class OrderService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:3000/api/orders';\n  }\n  /**\r\n   * --- THIS IS THE NEW METHOD ---\r\n   * Fetches the order history for the currently logged-in user.\r\n   * @returns An Observable array of Orders.\r\n   */\n  getOrders() {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // Makes a GET request to /api/orders\n    return this.http.get(this.apiUrl, {\n      headers: headers\n    });\n  }\n  /**\r\n   * Places a new order by sending the cart items to the backend.\r\n   * (This is your existing method).\r\n   * @param items The array of CartItem objects from the shopping cart.\r\n   * @returns An Observable with the response from the server.\r\n   */\n  placeOrder(items) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const body = {\n      items: items\n    };\n    // Makes a POST request to /api/orders\n    return this.http.post(this.apiUrl, body, {\n      headers: headers\n    });\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAqB9D;AAKA,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAFjD,WAAM,GAAG,kCAAkC;EAEuB;EAE1E;;;;;EAKAC,SAAS;IACP,MAAMC,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;IACzC,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAUM,KAAK;KACjC,CAAC;IACF;IACA,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAU,IAAI,CAACC,MAAM,EAAE;MAAEF,OAAO,EAAEA;IAAO,CAAE,CAAC;EAClE;EAEA;;;;;;EAMAG,UAAU,CAACC,KAAiB;IAC1B,MAAMN,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;IAEzC,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUM,KAAK;KACjC,CAAC;IAEF,MAAMO,IAAI,GAAG;MAAED,KAAK,EAAEA;IAAK,CAAE;IAE7B;IACA,OAAO,IAAI,CAACT,IAAI,CAACW,IAAI,CAAC,IAAI,CAACJ,MAAM,EAAEG,IAAI,EAAE;MAAEL,OAAO,EAAEA;IAAO,CAAE,CAAC;EAChE;;;uBArCWP,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAc,SAAZd,YAAY;MAAAe,YAFX;IAAM;EAAA","names":["HttpHeaders","OrderService","constructor","http","authService","getOrders","token","getToken","headers","get","apiUrl","placeOrder","items","body","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\91630\\OneDrive\\Desktop\\E-Commerce-Website\\frontend\\src\\app\\services\\order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { CartItem } from './cart.service';\r\n\r\n// --- DEFINE THE SHAPE OF THE ORDER DATA ---\r\n// This defines what a single item within a past order looks like.\r\nexport interface OrderItem {\r\n  quantity: number;\r\n  price_at_purchase: number;\r\n  name: string;\r\n  image_url: string;\r\n}\r\n\r\n// This defines what a single order in the history looks like.\r\nexport interface Order {\r\n  id: number;\r\n  created_at: string; // This will be a date string from the database\r\n  total_amount: number;\r\n  items: OrderItem[]; // Each order contains an array of items\r\n}\r\n// -----------------------------------------\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n  private apiUrl = 'http://localhost:3000/api/orders';\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n  /**\r\n   * --- THIS IS THE NEW METHOD ---\r\n   * Fetches the order history for the currently logged-in user.\r\n   * @returns An Observable array of Orders.\r\n   */\r\n  getOrders(): Observable<Order[]> {\r\n    const token = this.authService.getToken();\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n    // Makes a GET request to /api/orders\r\n    return this.http.get<Order[]>(this.apiUrl, { headers: headers });\r\n  }\r\n\r\n  /**\r\n   * Places a new order by sending the cart items to the backend.\r\n   * (This is your existing method).\r\n   * @param items The array of CartItem objects from the shopping cart.\r\n   * @returns An Observable with the response from the server.\r\n   */\r\n  placeOrder(items: CartItem[]): Observable<any> {\r\n    const token = this.authService.getToken();\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n\r\n    const body = { items: items };\r\n\r\n    // Makes a POST request to /api/orders\r\n    return this.http.post(this.apiUrl, body, { headers: headers });\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}