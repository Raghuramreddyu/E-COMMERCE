{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterPageComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" Passwords do not match. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPageComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.registerError);\n  }\n}\nfunction RegisterPageComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.registerSuccess);\n  }\n}\n// Custom validator function to check if the password and confirmPassword fields match.\nexport const passwordsMatchValidator = control => {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n  // Return an error object if passwords don't match, otherwise return null.\n  return password && confirmPassword && password.value !== confirmPassword.value ? {\n    passwordsMismatch: true\n  } : null;\n};\nexport class RegisterPageComponent {\n  constructor(fb, authService, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    // Create the form group with validators for each field\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validators: passwordsMatchValidator\n    }); // Apply the custom validator to the whole form\n    this.isLoading = false;\n    this.registerError = null;\n    this.registerSuccess = null;\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.registerError = null;\n    this.registerSuccess = null;\n    // Destructure email and password from the form's value\n    const {\n      email,\n      password\n    } = this.registerForm.value;\n    this.authService.register({\n      email,\n      password\n    }).subscribe({\n      next: () => {\n        this.isLoading = false;\n        this.registerSuccess = 'Registration successful! Redirecting to login...';\n        // Redirect to the login page after a short delay\n        setTimeout(() => this.router.navigate(['/login']), 2000);\n      },\n      error: err => {\n        this.isLoading = false;\n        // Display a user-friendly error message from the API response\n        this.registerError = err.error?.message || 'Registration failed. Please try again.';\n        console.error('Registration failed', err);\n      }\n    });\n  }\n  static {\n    this.ɵfac = function RegisterPageComponent_Factory(t) {\n      return new (t || RegisterPageComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterPageComponent,\n      selectors: [[\"app-register-page\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 25,\n      vars: 6,\n      consts: [[1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\", \"name\", \"email\", \"autocomplete\", \"email\"], [\"for\", \"password\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"name\", \"password\", \"autocomplete\", \"new-password\"], [\"for\", \"confirmPassword\"], [\"id\", \"confirmPassword\", \"type\", \"password\", \"formControlName\", \"confirmPassword\", \"name\", \"confirmPassword\", \"autocomplete\", \"new-password\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"class\", \"success-message\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn-primary\", 3, \"disabled\"], [1, \"auth-switch\"], [\"routerLink\", \"/login\"], [1, \"error-message\"], [1, \"success-message\"]],\n      template: function RegisterPageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Register\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function RegisterPageComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n          i0.ɵɵtext(10, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(11, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n          i0.ɵɵtext(14, \"Confirm Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(15, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(16, RegisterPageComponent_div_16_Template, 2, 0, \"div\", 9);\n          i0.ɵɵtemplate(17, RegisterPageComponent_div_17_Template, 2, 1, \"div\", 9);\n          i0.ɵɵtemplate(18, RegisterPageComponent_div_18_Template, 2, 1, \"div\", 10);\n          i0.ɵɵelementStart(19, \"button\", 11);\n          i0.ɵɵtext(20);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"p\", 12);\n          i0.ɵɵtext(22, \"Already have an account? \");\n          i0.ɵɵelementStart(23, \"a\", 13);\n          i0.ɵɵtext(24, \"Login\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngIf\", (ctx.registerForm.errors == null ? null : ctx.registerForm.errors[\"passwordsMismatch\"]) && ((tmp_1_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_1_0.touched));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.registerError);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.registerSuccess);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid || ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Registering...\" : \"Register\", \" \");\n        }\n      },\n      dependencies: [CommonModule, i4.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, RouterModule, i3.RouterLink],\n      styles: [\"h2[_ngcontent-%COMP%] {\\n    text-align: center;\\n    margin-bottom: 2rem;\\n    font-weight: 700;\\n}\\n\\n.error-message[_ngcontent-%COMP%] {\\n    color: #f87171;\\n    background-color: rgba(248, 113, 113, 0.1);\\n    border: 1px solid #f87171;\\n    border-radius: 8px;\\n    padding: 1rem;\\n    margin-bottom: 1rem;\\n    text-align: center;\\n}\\n\\n.success-message[_ngcontent-%COMP%] {\\n    color: #4ade80;\\n    background-color: rgba(74, 222, 128, 0.1);\\n    border: 1px solid #4ade80;\\n    border-radius: 8px;\\n    padding: 1rem;\\n    margin-bottom: 1rem;\\n    text-align: center;\\n}\\n\\n.auth-switch[_ngcontent-%COMP%] {\\n    text-align: center;\\n    margin-top: 1.5rem;\\n}\\n\\n.auth-switch[_ngcontent-%COMP%]   a[_ngcontent-%COMP%] {\\n    font-weight: 500;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksY0FBYztJQUNkLDBDQUEwQztJQUMxQyx5QkFBeUI7SUFDekIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksY0FBYztJQUNkLHlDQUF5QztJQUN6Qyx5QkFBeUI7SUFDekIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGdCQUFnQjtBQUNwQiIsInNvdXJjZXNDb250ZW50IjpbImgyIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcbiAgICBmb250LXdlaWdodDogNzAwO1xufVxuXG4uZXJyb3ItbWVzc2FnZSB7XG4gICAgY29sb3I6ICNmODcxNzE7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDgsIDExMywgMTEzLCAwLjEpO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmODcxNzE7XG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgIHBhZGRpbmc6IDFyZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5zdWNjZXNzLW1lc3NhZ2Uge1xuICAgIGNvbG9yOiAjNGFkZTgwO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNzQsIDIyMiwgMTI4LCAwLjEpO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM0YWRlODA7XG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgIHBhZGRpbmc6IDFyZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5hdXRoLXN3aXRjaCB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi10b3A6IDEuNXJlbTtcbn1cblxuLmF1dGgtc3dpdGNoIGEge1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["CommonModule","ReactiveFormsModule","Validators","RouterModule","i0","passwordsMatchValidator","control","password","get","confirmPassword","value","passwordsMismatch","RegisterPageComponent","constructor","fb","authService","router","group","email","required","minLength","validators","onSubmit","registerForm","invalid","isLoading","registerError","registerSuccess","register","subscribe","next","setTimeout","navigate","error","err","message","console","selectors","standalone","features","decls","vars","consts","template","ctx","styles"],"sourceRoot":"","sources":["C:\\Woxsen\\DevOPS Project\\E-Commerce-Website\\frontend\\src\\app\\pages\\register\\register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AbstractControl, FormBuilder, ReactiveFormsModule, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n// Custom validator function to check if the password and confirmPassword fields match.\nexport const passwordsMatchValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n  // Return an error object if passwords don't match, otherwise return null.\n  return password && confirmPassword && password.value !== confirmPassword.value ? { passwordsMismatch: true } : null;\n};\n\n@Component({\n  selector: 'app-register-page',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, RouterModule],\n  template: `\n    <div class=\"form-container\">\n      <h2>Register</h2>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n          <label for=\"email\">Email</label>\n          <!-- Added name and autocomplete attributes for browser autofill and accessibility -->\n          <input id=\"email\" type=\"email\" formControlName=\"email\" name=\"email\" autocomplete=\"email\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"password\">Password</label>\n          <!-- 'new-password' tells password managers this is for creating a new account -->\n          <input id=\"password\" type=\"password\" formControlName=\"password\" name=\"password\" autocomplete=\"new-password\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"confirmPassword\">Confirm Password</label>\n          <input id=\"confirmPassword\" type=\"password\" formControlName=\"confirmPassword\" name=\"confirmPassword\" autocomplete=\"new-password\">\n        </div>\n\n        <!-- Display error messages for invalid inputs or API failures -->\n        <div *ngIf=\"registerForm.errors?.['passwordsMismatch'] && registerForm.get('confirmPassword')?.touched\" class=\"error-message\">\n          Passwords do not match.\n        </div>\n        <div *ngIf=\"registerError\" class=\"error-message\">{{ registerError }}</div>\n        <div *ngIf=\"registerSuccess\" class=\"success-message\">{{ registerSuccess }}</div>\n\n        <button class=\"btn-primary\" type=\"submit\" [disabled]=\"registerForm.invalid || isLoading\">\n          {{ isLoading ? 'Registering...' : 'Register' }}\n        </button>\n        <p class=\"auth-switch\">Already have an account? <a routerLink=\"/login\">Login</a></p>\n      </form>\n    </div>\n  `,\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterPageComponent {\n  // Create the form group with validators for each field\n  registerForm = this.fb.group({\n    email: ['', [Validators.required, Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(8)]],\n    confirmPassword: ['', Validators.required]\n  }, { validators: passwordsMatchValidator }); // Apply the custom validator to the whole form\n\n  isLoading = false;\n  registerError: string | null = null;\n  registerSuccess: string | null = null;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  onSubmit() {\n    if (this.registerForm.invalid) { return; }\n    \n    this.isLoading = true;\n    this.registerError = null;\n    this.registerSuccess = null;\n\n    // Destructure email and password from the form's value\n    const { email, password } = this.registerForm.value;\n\n    this.authService.register({ email, password }).subscribe({\n      next: () => {\n        this.isLoading = false;\n        this.registerSuccess = 'Registration successful! Redirecting to login...';\n        // Redirect to the login page after a short delay\n        setTimeout(() => this.router.navigate(['/login']), 2000);\n      },\n      error: (err) => {\n        this.isLoading = false;\n        // Display a user-friendly error message from the API response\n        this.registerError = err.error?.message || 'Registration failed. Please try again.';\n        console.error('Registration failed', err);\n      }\n    });\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}