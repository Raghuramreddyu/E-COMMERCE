{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\n// -----------------------------------------\nexport class OrderService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:3000/api/orders';\n  }\n  /**\r\n   * --- THIS IS THE NEW METHOD ---\r\n   * Fetches the order history for the currently logged-in user.\r\n   * @returns An Observable array of Orders.\r\n   */\n  getOrders() {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // Makes a GET request to /api/orders\n    return this.http.get(this.apiUrl, {\n      headers: headers\n    });\n  }\n  getOrder(publicOrderId) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/${publicOrderId}`, {\n      headers: headers\n    });\n  }\n  /**\r\n   * Places a new order by sending the cart items to the backend.\r\n   * (This is your existing method).\r\n   * @param items The array of CartItem objects from the shopping cart.\r\n   * @returns An Observable with the response from the server.\r\n   */\n  placeOrder(items) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const body = {\n      items: items\n    };\n    // Makes a POST request to /api/orders\n    return this.http.post(this.apiUrl, body, {\n      headers: headers\n    });\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAsB9D;AAKA,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAFjD,WAAM,GAAG,kCAAkC;EAEuB;EAE1E;;;;;EAKAC,SAAS;IACP,MAAMC,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;IACzC,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAUM,KAAK;KACjC,CAAC;IACF;IACA,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAU,IAAI,CAACC,MAAM,EAAE;MAAEF,OAAO,EAAEA;IAAO,CAAE,CAAC;EAClE;EAEAG,QAAQ,CAACC,aAAqB;IAC5B,MAAMN,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;IACzC,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAUM,KAAK;KACjC,CAAC;IACF,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,IAAIE,aAAa,EAAE,EAAE;MAAEJ,OAAO,EAAEA;IAAO,CAAE,CAAC;EACtF;EAEA;;;;;;EAMAK,UAAU,CAACC,KAAiB;IAC1B,MAAMR,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;IAEzC,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUM,KAAK;KACjC,CAAC;IAEF,MAAMS,IAAI,GAAG;MAAED,KAAK,EAAEA;IAAK,CAAE;IAE7B;IACA,OAAO,IAAI,CAACX,IAAI,CAACa,IAAI,CAAC,IAAI,CAACN,MAAM,EAAEK,IAAI,EAAE;MAAEP,OAAO,EAAEA;IAAO,CAAE,CAAC;EAChE;;;uBA7CWP,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAgB,SAAZhB,YAAY;MAAAiB,YAFX;IAAM;EAAA","names":["HttpHeaders","OrderService","constructor","http","authService","getOrders","token","getToken","headers","get","apiUrl","getOrder","publicOrderId","placeOrder","items","body","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Woxsen\\DevOPS Project\\E-Commerce-Website\\frontend\\src\\app\\services\\order.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { CartItem } from './cart.service';\n\n// --- DEFINE THE SHAPE OF THE ORDER DATA ---\n// This defines what a single item within a past order looks like.\nexport interface OrderItem {\n  quantity: number;\n  price_at_purchase: number;\n  name: string;\n  image_url: string;\n}\n\n// This defines what a single order in the history looks like.\nexport interface Order {\n  id: number;\n  public_order_id: string;\n  created_at: string; // This will be a date string from the database\n  total_amount: number;\n  items: OrderItem[]; // Each order contains an array of items\n}\n// -----------------------------------------\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  private apiUrl = 'http://localhost:3000/api/orders';\n\n  constructor(private http: HttpClient, private authService: AuthService) { }\n\n  /**\n   * --- THIS IS THE NEW METHOD ---\n   * Fetches the order history for the currently logged-in user.\n   * @returns An Observable array of Orders.\n   */\n  getOrders(): Observable<Order[]> {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // Makes a GET request to /api/orders\n    return this.http.get<Order[]>(this.apiUrl, { headers: headers });\n  }\n\n  getOrder(publicOrderId: string): Observable<Order> {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get<Order>(`${this.apiUrl}/${publicOrderId}`, { headers: headers });\n  }\n\n  /**\n   * Places a new order by sending the cart items to the backend.\n   * (This is your existing method).\n   * @param items The array of CartItem objects from the shopping cart.\n   * @returns An Observable with the response from the server.\n   */\n  placeOrder(items: CartItem[]): Observable<any> {\n    const token = this.authService.getToken();\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n\n    const body = { items: items };\n\n    // Makes a POST request to /api/orders\n    return this.http.post(this.apiUrl, body, { headers: headers });\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}