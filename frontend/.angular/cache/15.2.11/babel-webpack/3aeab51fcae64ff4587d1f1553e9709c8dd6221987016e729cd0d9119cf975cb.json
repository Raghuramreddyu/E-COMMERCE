{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { map } from 'rxjs';\nexport const authGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  // Use the isLoggedIn$ observable from the service.\n  // The guard will automatically update when login status changes.\n  return authService.isLoggedIn$.pipe(map(isLoggedIn => {\n    if (isLoggedIn) {\n      // If the user is logged in, allow access to the route\n      return true;\n    } else {\n      // If not logged in, redirect to the login page\n      router.navigate(['/login']);\n      return false;\n    }\n  }));\n};","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,WAAW,QAAQ,0BAA0B;AAEtD,SAASC,GAAG,QAAQ,MAAM;AAE1B,OAAO,MAAMC,SAAS,GAAkB,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,MAAMC,WAAW,GAAGP,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMM,MAAM,GAAGR,MAAM,CAACC,MAAM,CAAC;EAE7B;EACA;EACA,OAAOM,WAAW,CAACE,WAAW,CAACC,IAAI,CACjCP,GAAG,CAACQ,UAAU,IAAG;IACf,IAAIA,UAAU,EAAE;MACd;MACA,OAAO,IAAI;KACZ,MAAM;MACL;MACAH,MAAM,CAACI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAC3B,OAAO,KAAK;;EAEhB,CAAC,CAAC,CACH;AACH,CAAC","names":["inject","Router","AuthService","map","authGuard","route","state","authService","router","isLoggedIn$","pipe","isLoggedIn","navigate"],"sourceRoot":"","sources":["C:\\Woxsen\\DevOPS Project\\E-Commerce-Website\\frontend\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { tap } from 'rxjs/operators';\r\nimport { map } from 'rxjs';\r\n\r\nexport const authGuard: CanActivateFn = (route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  // Use the isLoggedIn$ observable from the service.\r\n  // The guard will automatically update when login status changes.\r\n  return authService.isLoggedIn$.pipe(\r\n    map(isLoggedIn => {\r\n      if (isLoggedIn) {\r\n        // If the user is logged in, allow access to the route\r\n        return true;\r\n      } else {\r\n        // If not logged in, redirect to the login page\r\n        router.navigate(['/login']);\r\n        return false;\r\n      }\r\n    })\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}