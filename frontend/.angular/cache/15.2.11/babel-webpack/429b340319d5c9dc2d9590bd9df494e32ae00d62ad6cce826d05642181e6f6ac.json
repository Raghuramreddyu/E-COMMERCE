{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class ProductService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:3000/api/products';\n  }\n  // Fetches products, optionally filtering by category\n  getProducts(category) {\n    let url = this.apiUrl;\n    if (category) {\n      url += `?category=${category}`;\n    }\n    return this.http.get(url);\n  }\n  // Fetches a single product by its ID\n  getProduct(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Adds a new product (Admin only)\n  addProduct(productData) {\n    return this.http.post(this.apiUrl, productData, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.authService.getToken()}`\n      })\n    });\n  }\n  // Deletes a product (Admin only)\n  deleteProduct(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${this.authService.getToken()}`\n      })\n    });\n  }\n  static {\n    this.ɵfac = function ProductService_Factory(t) {\n      return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductService,\n      factory: ProductService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAiB9D,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,SAAI,GAAJD,IAAI;IAAsB,gBAAW,GAAXC,WAAW;IAFjD,WAAM,GAAG,oCAAoC;EAEqB;EAE1E;EACAC,WAAW,CAACC,QAAiB;IAC3B,IAAIC,GAAG,GAAG,IAAI,CAACC,MAAM;IACrB,IAAIF,QAAQ,EAAE;MACZC,GAAG,IAAI,aAAaD,QAAQ,EAAE;;IAEhC,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAYF,GAAG,CAAC;EACtC;EAEA;EACAG,UAAU,CAACC,EAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAU,GAAG,IAAI,CAACD,MAAM,IAAIG,EAAE,EAAE,CAAC;EACvD;EAEA;EACAC,UAAU,CAACC,WAAgC;IACzC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAU,IAAI,CAACN,MAAM,EAAEK,WAAW,EAAE;MACvDE,OAAO,EAAE,IAAIf,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACY,QAAQ,EAAE;OACvD;KACF,CAAC;EACJ;EAEA;EACAC,aAAa,CAACN,EAAU;IACtB,OAAO,IAAI,CAACR,IAAI,CAACe,MAAM,CAAC,GAAG,IAAI,CAACV,MAAM,IAAIG,EAAE,EAAE,EAAE;MAC9CI,OAAO,EAAE,IAAIf,WAAW,CAAC;QACvB,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACY,QAAQ,EAAE;OACvD;KACF,CAAC;EACJ;;;uBApCWf,cAAc;IAAA;EAAA;;;aAAdA,cAAc;MAAAkB,SAAdlB,cAAc;MAAAmB,YAFb;IAAM;EAAA","names":["HttpHeaders","ProductService","constructor","http","authService","getProducts","category","url","apiUrl","get","getProduct","id","addProduct","productData","post","headers","getToken","deleteProduct","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Woxsen\\DevOPS Project\\E-Commerce-Website\\frontend\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\nexport interface Product {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  image_url: string;\n  slug: string;\n  category: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private apiUrl = 'http://localhost:3000/api/products';\n\n  constructor(private http: HttpClient, private authService: AuthService) { }\n\n  // Fetches products, optionally filtering by category\n  getProducts(category?: string): Observable<Product[]> {\n    let url = this.apiUrl;\n    if (category) {\n      url += `?category=${category}`;\n    }\n    return this.http.get<Product[]>(url);\n  }\n\n  // Fetches a single product by its ID\n  getProduct(id: number): Observable<Product> {\n    return this.http.get<Product>(`${this.apiUrl}/${id}`);\n  }\n\n  // Adds a new product (Admin only)\n  addProduct(productData: Omit<Product, 'id'>): Observable<Product> {\n    return this.http.post<Product>(this.apiUrl, productData, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.authService.getToken()}`\n      })\n    });\n  }\n\n  // Deletes a product (Admin only)\n  deleteProduct(id: number): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${this.authService.getToken()}`\n      })\n    });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}