{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n    this._isLoggedIn = new BehaviorSubject(false);\n    this.isLoggedIn$ = this._isLoggedIn.asObservable();\n    const token = localStorage.getItem('token');\n    this._isLoggedIn.next(!!token);\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      this._isLoggedIn.next(true);\n    }));\n  }\n  adminLogin(credentials) {\n    return this.http.post(`${this.apiUrl}/admin/login`, credentials).pipe(tap(response => {\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('isAdmin', 'true');\n      this._isLoggedIn.next(true);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('isAdmin');\n    this._isLoggedIn.next(false);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAdmin() {\n    return localStorage.getItem('isAdmin') === 'true';\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;;;AAKvD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,WAAM,GAAG,gCAAgC;IACzC,gBAAW,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;IACzD,gBAAW,GAAG,IAAI,CAACK,WAAW,CAACC,YAAY,EAAE;IAG3C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACJ,WAAW,CAACK,IAAI,CAAC,CAAC,CAACH,KAAK,CAAC;EAChC;EAEAI,QAAQ,CAACC,IAAS;IAChB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,IAAI,CAAC;EACxD;EAEAG,KAAK,CAACC,WAAgB;IACpB,OAAO,IAAI,CAACZ,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEE,WAAW,CAAC,CAACC,IAAI,CAC7DhB,GAAG,CAAEiB,QAAa,IAAI;MACpBV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACX,KAAK,CAAC;MAC7C,IAAI,CAACF,WAAW,CAACK,IAAI,CAAC,IAAI,CAAC;IAC7B,CAAC,CAAC,CACH;EACH;EAEAU,UAAU,CAACJ,WAAgB;IACzB,OAAO,IAAI,CAACZ,IAAI,CAACS,IAAI,CAAC,GAAG,IAAI,CAACC,MAAM,cAAc,EAAEE,WAAW,CAAC,CAACC,IAAI,CACnEhB,GAAG,CAAEiB,QAAa,IAAI;MACpBV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACX,KAAK,CAAC;MAC7CC,YAAY,CAACW,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC;MACvC,IAAI,CAACd,WAAW,CAACK,IAAI,CAAC,IAAI,CAAC;IAC7B,CAAC,CAAC,CACH;EACH;EAEAW,MAAM;IACJb,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;IAChCd,YAAY,CAACc,UAAU,CAAC,SAAS,CAAC;IAClC,IAAI,CAACjB,WAAW,CAACK,IAAI,CAAC,KAAK,CAAC;EAC9B;EAEAa,QAAQ;IACN,OAAOf,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAe,OAAO;IACL,OAAOhB,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,KAAK,MAAM;EACnD;;;uBA7CWP,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAuB,SAAXvB,WAAW;MAAAwB,YAFV;IAAM;EAAA","names":["BehaviorSubject","tap","AuthService","constructor","http","_isLoggedIn","asObservable","token","localStorage","getItem","next","register","user","post","apiUrl","login","credentials","pipe","response","setItem","adminLogin","logout","removeItem","getToken","isAdmin","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\91630\\OneDrive\\Desktop\\E-Commerce-Website\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3000/api/auth';\r\n  private _isLoggedIn = new BehaviorSubject<boolean>(false);\r\n  isLoggedIn$ = this._isLoggedIn.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    const token = localStorage.getItem('token');\r\n    this._isLoggedIn.next(!!token);\r\n  }\r\n\r\n  register(user: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/register`, user);\r\n  }\r\n\r\n  login(credentials: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(\r\n      tap((response: any) => {\r\n        localStorage.setItem('token', response.token);\r\n        this._isLoggedIn.next(true);\r\n      })\r\n    );\r\n  }\r\n\r\n  adminLogin(credentials: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/admin/login`, credentials).pipe(\r\n      tap((response: any) => {\r\n        localStorage.setItem('token', response.token);\r\n        localStorage.setItem('isAdmin', 'true');\r\n        this._isLoggedIn.next(true);\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('isAdmin');\r\n    this._isLoggedIn.next(false);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    return localStorage.getItem('isAdmin') === 'true';\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}