{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterPageComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" Passwords do not match. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterPageComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.registerError);\n  }\n}\nfunction RegisterPageComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.registerSuccess);\n  }\n}\n// Custom validator function to check if the password and confirmPassword fields match.\nexport const passwordsMatchValidator = control => {\n  const password = control.get('password');\n  const confirmPassword = control.get('confirmPassword');\n  // Return an error object if passwords don't match, otherwise return null.\n  return password && confirmPassword && password.value !== confirmPassword.value ? {\n    passwordsMismatch: true\n  } : null;\n};\nexport let RegisterPageComponent = /*#__PURE__*/(() => {\n  class RegisterPageComponent {\n    constructor(fb, authService, router) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      // Create the form group with validators for each field\n      this.registerForm = this.fb.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(8)]],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validators: passwordsMatchValidator\n      }); // Apply the custom validator to the whole form\n      this.isLoading = false;\n      this.registerError = null;\n      this.registerSuccess = null;\n    }\n    onSubmit() {\n      if (this.registerForm.invalid) {\n        return;\n      }\n      this.isLoading = true;\n      this.registerError = null;\n      this.registerSuccess = null;\n      // Destructure email and password from the form's value\n      const {\n        email,\n        password\n      } = this.registerForm.value;\n      this.authService.register({\n        email,\n        password\n      }).subscribe({\n        next: () => {\n          this.isLoading = false;\n          this.registerSuccess = 'Registration successful! Redirecting to login...';\n          // Redirect to the login page after a short delay\n          setTimeout(() => this.router.navigate(['/login']), 2000);\n        },\n        error: err => {\n          this.isLoading = false;\n          // Display a user-friendly error message from the API response\n          this.registerError = err.error?.message || 'Registration failed. Please try again.';\n          console.error('Registration failed', err);\n        }\n      });\n    }\n    static {\n      this.ɵfac = function RegisterPageComponent_Factory(t) {\n        return new (t || RegisterPageComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: RegisterPageComponent,\n        selectors: [[\"app-register-page\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 25,\n        vars: 6,\n        consts: [[1, \"form-container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\", \"name\", \"email\", \"autocomplete\", \"email\"], [\"for\", \"password\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"name\", \"password\", \"autocomplete\", \"new-password\"], [\"for\", \"confirmPassword\"], [\"id\", \"confirmPassword\", \"type\", \"password\", \"formControlName\", \"confirmPassword\", \"name\", \"confirmPassword\", \"autocomplete\", \"new-password\"], [\"class\", \"error-message\", 4, \"ngIf\"], [\"class\", \"success-message\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"btn-primary\", 3, \"disabled\"], [1, \"auth-switch\"], [\"routerLink\", \"/login\"], [1, \"error-message\"], [1, \"success-message\"]],\n        template: function RegisterPageComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n            i0.ɵɵtext(2, \"Register\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function RegisterPageComponent_Template_form_ngSubmit_3_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n            i0.ɵɵtext(6, \"Email\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(7, \"input\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n            i0.ɵɵtext(10, \"Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(11, \"input\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n            i0.ɵɵtext(14, \"Confirm Password\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(15, \"input\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(16, RegisterPageComponent_div_16_Template, 2, 0, \"div\", 9);\n            i0.ɵɵtemplate(17, RegisterPageComponent_div_17_Template, 2, 1, \"div\", 9);\n            i0.ɵɵtemplate(18, RegisterPageComponent_div_18_Template, 2, 1, \"div\", 10);\n            i0.ɵɵelementStart(19, \"button\", 11);\n            i0.ɵɵtext(20);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(21, \"p\", 12);\n            i0.ɵɵtext(22, \"Already have an account? \");\n            i0.ɵɵelementStart(23, \"a\", 13);\n            i0.ɵɵtext(24, \"Login\");\n            i0.ɵɵelementEnd()()()();\n          }\n          if (rf & 2) {\n            let tmp_1_0;\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n            i0.ɵɵadvance(13);\n            i0.ɵɵproperty(\"ngIf\", (ctx.registerForm.errors == null ? null : ctx.registerForm.errors[\"passwordsMismatch\"]) && ((tmp_1_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_1_0.touched));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.registerError);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.registerSuccess);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid || ctx.isLoading);\n            i0.ɵɵadvance(1);\n            i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Registering...\" : \"Register\", \" \");\n          }\n        },\n        dependencies: [CommonModule, i4.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, RouterModule, i3.RouterLink],\n        styles: [\"h2[_ngcontent-%COMP%]{text-align:center;margin-bottom:2rem;font-weight:700}.error-message[_ngcontent-%COMP%]{color:#f87171;background-color:#f871711a;border:1px solid #f87171;border-radius:8px;padding:1rem;margin-bottom:1rem;text-align:center}.success-message[_ngcontent-%COMP%]{color:#4ade80;background-color:#4ade801a;border:1px solid #4ade80;border-radius:8px;padding:1rem;margin-bottom:1rem;text-align:center}.auth-switch[_ngcontent-%COMP%]{text-align:center;margin-top:1.5rem}.auth-switch[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{font-weight:500}\"]\n      });\n    }\n  }\n  return RegisterPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}