{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    // Use BehaviorSubject to create an observable stream of cart items\n    this._cartItems = new BehaviorSubject([]);\n    this.cartItems$ = this._cartItems.asObservable();\n    // Use BehaviorSubject for the total item count\n    this._itemCount = new BehaviorSubject(0);\n    this.itemCount$ = this._itemCount.asObservable();\n    // Optional: You could add logic here to load a saved cart from localStorage\n  }\n  // Adds a product to the cart or increments its quantity\n  addToCart(product) {\n    const currentItems = this._cartItems.getValue();\n    const existingItem = currentItems.find(item => item.product.id === product.id);\n    if (existingItem) {\n      // If item already exists, just increase the quantity\n      existingItem.quantity++;\n    } else {\n      // If it's a new item, add it to the cart with quantity 1\n      currentItems.push({\n        product: product,\n        quantity: 1\n      });\n    }\n    // Emit the updated cart and item count\n    this._cartItems.next(currentItems);\n    this.updateItemCount();\n  }\n  // You can add other methods here later, like removeItem(), clearCart(), etc.\n  // Private helper method to calculate and update the total item count\n  updateItemCount() {\n    const total = this._cartItems.getValue().reduce((sum, item) => sum + item.quantity, 0);\n    this._itemCount.next(total);\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAYtC,OAAM,MAAOC,WAAW;EAStBC;IARA;IACQ,eAAU,GAAG,IAAIF,eAAe,CAAa,EAAE,CAAC;IACxD,eAAU,GAAG,IAAI,CAACG,UAAU,CAACC,YAAY,EAAE;IAE3C;IACQ,eAAU,GAAG,IAAIJ,eAAe,CAAS,CAAC,CAAC;IACnD,eAAU,GAAG,IAAI,CAACK,UAAU,CAACD,YAAY,EAAE;IAGzC;EACF;EAEA;EACAE,SAAS,CAACC,OAAgB;IACxB,MAAMC,YAAY,GAAG,IAAI,CAACL,UAAU,CAACM,QAAQ,EAAE;IAC/C,MAAMC,YAAY,GAAGF,YAAY,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;IAE9E,IAAIH,YAAY,EAAE;MAChB;MACAA,YAAY,CAACI,QAAQ,EAAE;KACxB,MAAM;MACL;MACAN,YAAY,CAACO,IAAI,CAAC;QAAER,OAAO,EAAEA,OAAO;QAAEO,QAAQ,EAAE;MAAC,CAAE,CAAC;;IAGtD;IACA,IAAI,CAACX,UAAU,CAACa,IAAI,CAACR,YAAY,CAAC;IAClC,IAAI,CAACS,eAAe,EAAE;EACxB;EAEA;EAEA;EACQA,eAAe;IACrB,MAAMC,KAAK,GAAG,IAAI,CAACf,UAAU,CAACM,QAAQ,EAAE,CAACU,MAAM,CAAC,CAACC,GAAG,EAAER,IAAI,KAAKQ,GAAG,GAAGR,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;IACtF,IAAI,CAACT,UAAU,CAACW,IAAI,CAACE,KAAK,CAAC;EAC7B;;;uBArCWjB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAoB,SAAXpB,WAAW;MAAAqB,YAFV;IAAM;EAAA","names":["BehaviorSubject","CartService","constructor","_cartItems","asObservable","_itemCount","addToCart","product","currentItems","getValue","existingItem","find","item","id","quantity","push","next","updateItemCount","total","reduce","sum","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\91630\\OneDrive\\Desktop\\E-Commerce-Website\\frontend\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Product } from './product.service';\r\n\r\n// Define the structure of an item in the cart\r\nexport interface CartItem {\r\n  product: Product;\r\n  quantity: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  // Use BehaviorSubject to create an observable stream of cart items\r\n  private _cartItems = new BehaviorSubject<CartItem[]>([]);\r\n  cartItems$ = this._cartItems.asObservable();\r\n\r\n  // Use BehaviorSubject for the total item count\r\n  private _itemCount = new BehaviorSubject<number>(0);\r\n  itemCount$ = this._itemCount.asObservable();\r\n\r\n  constructor() {\r\n    // Optional: You could add logic here to load a saved cart from localStorage\r\n  }\r\n\r\n  // Adds a product to the cart or increments its quantity\r\n  addToCart(product: Product): void {\r\n    const currentItems = this._cartItems.getValue();\r\n    const existingItem = currentItems.find(item => item.product.id === product.id);\r\n\r\n    if (existingItem) {\r\n      // If item already exists, just increase the quantity\r\n      existingItem.quantity++;\r\n    } else {\r\n      // If it's a new item, add it to the cart with quantity 1\r\n      currentItems.push({ product: product, quantity: 1 });\r\n    }\r\n\r\n    // Emit the updated cart and item count\r\n    this._cartItems.next(currentItems);\r\n    this.updateItemCount();\r\n  }\r\n\r\n  // You can add other methods here later, like removeItem(), clearCart(), etc.\r\n\r\n  // Private helper method to calculate and update the total item count\r\n  private updateItemCount(): void {\r\n    const total = this._cartItems.getValue().reduce((sum, item) => sum + item.quantity, 0);\r\n    this._itemCount.next(total);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}