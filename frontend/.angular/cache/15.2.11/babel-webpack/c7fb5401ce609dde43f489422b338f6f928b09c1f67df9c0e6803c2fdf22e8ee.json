{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      // A BehaviorSubject holds the current list of cart items.\n      // Components can subscribe to this to get real-time updates.\n      this._cartItems = new BehaviorSubject([]);\n      this.cartItems$ = this._cartItems.asObservable();\n      // An observable for the total number of items in the cart\n      this.itemCount$ = this.cartItems$.pipe(map(items => items.reduce((sum, item) => sum + item.quantity, 0)));\n      // An observable for the total price of all items in the cart\n      this.totalPrice$ = this.cartItems$.pipe(map(items => items.reduce((sum, item) => sum + item.product.price * item.quantity, 0)));\n      // Optional: Load cart from localStorage if you want it to persist\n    }\n    // Adds a product to the cart or increments its quantity\n    addToCart(product) {\n      const currentItems = this._cartItems.getValue();\n      const existingItem = currentItems.find(item => item.product.id === product.id);\n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        currentItems.push({\n          product: product,\n          quantity: 1\n        });\n      }\n      this._cartItems.next([...currentItems]); // Emit a new array to trigger change detection\n    }\n    // Removes an item completely from the cart\n    removeFromCart(productId) {\n      const currentItems = this._cartItems.getValue();\n      const updatedItems = currentItems.filter(item => item.product.id !== productId);\n      this._cartItems.next(updatedItems);\n    }\n    // Updates the quantity of a specific item\n    updateQuantity(productId, newQuantity) {\n      if (newQuantity < 1) {\n        this.removeFromCart(productId);\n        return;\n      }\n      const currentItems = this._cartItems.getValue();\n      const itemToUpdate = currentItems.find(item => item.product.id === productId);\n      if (itemToUpdate) {\n        itemToUpdate.quantity = newQuantity;\n      }\n      this._cartItems.next([...currentItems]);\n    }\n    // Empties the entire cart\n    clearCart() {\n      this._cartItems.next([]);\n    }\n    static {\n      this.ɵfac = function CartService_Factory(t) {\n        return new (t || CartService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CartService,\n        factory: CartService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}